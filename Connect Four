//A c++ program to implement connect four
#include <iostream>
#include <vector>
#include <string>

using namespace std;

const int ROWS = 6;
const int COLS = 7;

// Function prototypes
void printBoard(const vector<vector<char>>& board);
bool isValidMove(const vector<vector<char>>& board, int col);
void makeMove(vector<vector<char>>& board, int col, char player);
bool checkForWin(const vector<vector<char>>& board, char player);
bool isBoardFull(const vector<vector<char>>& board);

int main() {
    vector<vector<char>> board(ROWS, vector<char>(COLS, ' '));
    char currentPlayer = 'X';
    bool gameOver = false;

    while (!gameOver) {
        printBoard(board);

        int column;
        cout << "Player " << currentPlayer << ", enter column (1-7): ";
        cin >> column;
        column--; // Adjust to zero-based indexing

        if (isValidMove(board, column)) {
            makeMove(board, column, currentPlayer);
            if (checkForWin(board, currentPlayer)) {
                printBoard(board);
                cout << "Player " << currentPlayer << " wins!" << endl;
                gameOver = true;
            } else if (isBoardFull(board)) {
                printBoard(board);
                cout << "It's a draw!" << endl;
                gameOver = true;
            } else {
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            }
        } else {
            cout << "Invalid move. Please try again." << endl;
        }
    }

    return 0;
}

void printBoard(const vector<vector<char>>& board) {
    cout << "\n 1 2 3 4 5 6 7\n";
    cout << "---------------\n";
    for (int row = 0; row < ROWS; row++) {
        cout << "|";
        for (int col = 0; col < COLS; col++) {
            cout << board[row][col] << "|";
        }
        cout << "\n---------------\n";
    }
}

bool isValidMove(const vector<vector<char>>& board, int col) {
    return col >= 0 && col < COLS && board[0][col] == ' ';
}

void makeMove(vector<vector<char>>& board, int col, char player) {
    for (int row = ROWS - 1; row >= 0; row--) {
        if (board[row][col] == ' ') {
            board[row][col] = player;
            break;
        }
    }
}

bool checkForWin(const vector<vector<char>>& board, char player) {
    // Check horizontal
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col <= COLS - 4; col++) {
            if (board[row][col] == player &&
                board[row][col + 1] == player &&
                board[row][col + 2] == player &&
                board[row][col + 3] == player) {
                return true;
            }
        }
    }

    // Check vertical
    for (int row = 0; row <= ROWS - 4; row++) {
        for (int col = 0; col < COLS; col++) {
            if (board[row][col] == player &&
                board[row + 1][col] == player &&
                board[row + 2][col] == player &&
                board[row + 3][col] == player) {
                return true;
            }
        }
    }

    // Check diagonal (top-left to bottom-right)
    for (int row = 0; row <= ROWS - 4; row++) {
        for (int col = 0; col <= COLS - 4; col++) {
            if (board[row][col] == player &&
                board[row + 1][col + 1] == player &&
                board[row + 2][col + 2] == player &&
                board[row + 3][col + 3] == player) {
                return true;
            }
        }
    }

    // Check diagonal (bottom-left to top-right)
    for (int row = ROWS - 1; row >= 3; row--) {
        for (int col = 0; col <= COLS - 4; col++) {
            if (board[row][col] == player &&
                board[row - 1][col + 1] == player &&
                board[row - 2][col + 2] == player &&
                board[row - 3][col + 3] == player) {
                return true;
            }
        }
    }

    return false;
}

bool isBoardFull(const vector<vector<char>>& board) {
    for (int row = 0; row < ROWS; row++) {
        for (int col = 0; col < COLS; col++) {
            if (board[row][col] == ' ') {
                return false;
            }
        }
    }
    return true;
}
